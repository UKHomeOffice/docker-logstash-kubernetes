filter {
  if "kubernetes" and "audit" in [tags] {
    # parse event as json and convert numerics to strings to prevent mapping conflicts
    ruby {
      code => "
        require 'json'

        def convert_numerics(obj)
          proc = Proc.new do |v| 
            case v
            when Hash, Array
              convert_numerics(v)
            when Numeric
              v.to_s
            else
              v
            end
          end

          if obj.is_a?(Hash)
            obj.each_with_object({}) {|(k,v),g| g[k] = proc.call(v)}
          elsif obj.is_a?(Array)
            obj.collect {|v| proc.call(v)}
          end
        end

        event.set('[audit_json]', convert_numerics(JSON.parse(event.to_hash['message'])))
      "
    }

    # Extract timestamp of the acutal event and overwrite @timestamp
    date {
      match => [ "[audit_json][timestamp]", "ISO8601" ]
    }

    # Kubernetes audit logs may have different structure and so we need to handle 
    # some fields differently depending on their value type due to potential dynamic mapping conflicts.
    if [audit_json][responseObject][status] {
      if [audit_json][responseObject][status] !~ /^\w+$/ {
        mutate {
          rename => { 
            "[audit_json][responseObject][status]" => "[audit_json][responseObject][status_object]" 
          }
        }
      }
    }

    # remove original log entry, add tag
    mutate {
      remove_field => "message"
      remove_field => "[audit_json][timestamp]"
      add_tag => ["kubernetes_audit_filtered"]
    }
  }
}

output {
  if "kubernetes_audit_filtered" in [tags] {
    elasticsearch {
      id => "kubernetes_audit_es"
      index => "kubernetes-audit-%ELASTICSEARCH_INDEX_SUFFIX%%{+YYYY.MM.dd}"
      document_type => "audit"
      hosts => [ "%ELASTICSEARCH_HOST%" ]
      ssl => %ELASTICSEARCH_SSL_ENABLED%
      cacert => "%ELASTICSEARCH_CA_CERTIFICATE_PATH%"
      ssl_certificate_verification => %ELASTICSEARCH_CERTIFICATE_VERIFICATION%
      user => "%ELASTICSEARCH_USER%"
      password => "%ELASTICSEARCH_PASSWORD%"
      validate_after_inactivity => 60
      http_compression => %ELASTICSEARCH_HTTP_COMPRESSION_ENABLED%
      %ELASTICSEARCH_FLUSH_SIZE_CONFIG%
    }
  }
}
